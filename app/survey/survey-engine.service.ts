//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v2.33.5985.23011 (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');
export const JSON_PARSE_REVIVER = new OpaqueToken('JSON_PARSE_REVIVER');

export interface IChoiceClient {
    /**
     * @return OK
     */
    all(): Observable<ChoiceModel[]>;
    /**
     * @return OK
     */
    get(key: string): Observable<ChoiceModel>;
    /**
     * @return OK
     */
    put(key: string, value: CreateUpdateChoiceModel): Observable<ChoiceModel>;
    /**
     * @return OK
     */
    delete(key: string): Observable<boolean>;
    /**
     * @return OK
     */
    post(value: CreateUpdateChoiceModel): Observable<ChoiceModel>;
}

@Injectable()
export class ChoiceClient implements IChoiceClient {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    private jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string, @Optional() @Inject(JSON_PARSE_REVIVER) jsonParseReviver?: (key: string, value: any) => any) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://test-bpm-surveyengine.drivetime.com"; 
        this.jsonParseReviver = jsonParseReviver;
    }

    /**
     * @return OK
     */
    all(): Observable<ChoiceModel[]> {
        var url = this.baseUrl + "/api/Choice/All?"; 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAll(response);
        });
    }

    private processAll(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: ChoiceModel[] = null; 
            result200 = data === "" ? null : <ChoiceModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    get(key: string): Observable<ChoiceModel> {
        var url = this.baseUrl + "/api/Choice/{key}?"; 

        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined.");
        url = url.replace("{key}", encodeURIComponent("" + key)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        });
    }

    private processGet(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: ChoiceModel = null; 
            result200 = data === "" ? null : <ChoiceModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    put(key: string, value: CreateUpdateChoiceModel): Observable<ChoiceModel> {
        var url = this.baseUrl + "/api/Choice/{key}?"; 

        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined.");
        url = url.replace("{key}", encodeURIComponent("" + key)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPut(response);
        });
    }

    private processPut(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: ChoiceModel = null; 
            result200 = data === "" ? null : <ChoiceModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    delete(key: string): Observable<boolean> {
        var url = this.baseUrl + "/api/Choice/{key}?"; 

        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined.");
        url = url.replace("{key}", encodeURIComponent("" + key)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        });
    }

    private processDelete(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    post(value: CreateUpdateChoiceModel): Observable<ChoiceModel> {
        var url = this.baseUrl + "/api/Choice?"; 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPost(response);
        });
    }

    private processPost(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: ChoiceModel = null; 
            result200 = data === "" ? null : <ChoiceModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }
}

export interface IQuestionClient {
    /**
     * @return OK
     */
    all(surveyKey: string): Observable<QuestionModel[]>;
    /**
     * @return OK
     */
    post(value: CreateQuestionModel, surveyKey: string): Observable<QuestionModel>;
    /**
     * @return OK
     */
    get(surveyKey: string, questionId: number): Observable<QuestionModel>;
    /**
     * @return OK
     */
    put(surveyKey: string, questionId: number, value: UpdateQuestionModel): Observable<QuestionModel>;
    /**
     * @return OK
     */
    delete(surveyKey: string, questionId: number): Observable<boolean>;
    /**
     * @return OK
     */
    addSubQuestion(surveyKey: string, questionId: number, value: CreateSubQuestionModel): Observable<QuestionModel>;
    /**
     * @return OK
     */
    removeSubQuestion(surveyKey: string, questionId: number, subQuestionId: number): Observable<boolean>;
    /**
     * @return OK
     */
    addChoiceToQuestion(survey: string, questionId: number, choiceKey: string, sortOrder: number): Observable<boolean>;
    /**
     * @return OK
     */
    removeChoiceFromQuestion(survey: string, questionId: number, choiceKey: string): Observable<boolean>;
    /**
     * @return OK
     */
    getQuestionVerbiage(surveyKey: string, questionId: number): Observable<QuestionVerbiageModel>;
    /**
     * @return OK
     */
    createQuestionVerbiage(surveyKey: string, questionId: number, value: CreateQuestionVerbiageModel): Observable<QuestionVerbiageModel>;
    /**
     * @return OK
     */
    updateQuestionVerbiage(surveyKey: string, questionId: number, verbiageId: number, verbiage: string): Observable<QuestionVerbiageModel>;
    /**
     * @return OK
     */
    deleteQuestionVerbiage(surveyKey: string, questionId: number, verbiageId: number): Observable<boolean>;
    /**
     * @return OK
     */
    getQuestionAttribute(surveyKey: string, questionId: number, attributeKey: string): Observable<QuestionAttributeModel>;
    /**
     * @return OK
     */
    updateQuestionAttributeValues(surveyKey: string, questionId: number, attributeKey: string, value: string): Observable<QuestionAttributeModel>;
    /**
     * @return OK
     */
    createQuestionAttributeValues(surveyKey: string, questionId: number, attributeKey: string, value: string): Observable<QuestionAttributeModel>;
    /**
     * @return OK
     */
    deleteQuestionAttributeValues(surveyKey: string, questionId: number, attributeKey: string): Observable<boolean>;
    /**
     * @return OK
     */
    getQuestionAttributeValues(surveyKey: string, questionId: number): Observable<QuestionAttributeModel[]>;
}

@Injectable()
export class QuestionClient implements IQuestionClient {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    private jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string, @Optional() @Inject(JSON_PARSE_REVIVER) jsonParseReviver?: (key: string, value: any) => any) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://test-bpm-surveyengine.drivetime.com"; 
        this.jsonParseReviver = jsonParseReviver;
    }

    /**
     * @return OK
     */
    all(surveyKey: string): Observable<QuestionModel[]> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAll(response);
        });
    }

    private processAll(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionModel[] = null; 
            result200 = data === "" ? null : <QuestionModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    post(value: CreateQuestionModel, surveyKey: string): Observable<QuestionModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPost(response);
        });
    }

    private processPost(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionModel = null; 
            result200 = data === "" ? null : <QuestionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    get(surveyKey: string, questionId: number): Observable<QuestionModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        });
    }

    private processGet(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionModel = null; 
            result200 = data === "" ? null : <QuestionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    put(surveyKey: string, questionId: number, value: UpdateQuestionModel): Observable<QuestionModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPut(response);
        });
    }

    private processPut(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionModel = null; 
            result200 = data === "" ? null : <QuestionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    delete(surveyKey: string, questionId: number): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        });
    }

    private processDelete(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    addSubQuestion(surveyKey: string, questionId: number, value: CreateSubQuestionModel): Observable<QuestionModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/AddSub?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAddSubQuestion(response);
        });
    }

    private processAddSubQuestion(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionModel = null; 
            result200 = data === "" ? null : <QuestionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    removeSubQuestion(surveyKey: string, questionId: number, subQuestionId: number): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/RemoveSub/{subQuestionId}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (subQuestionId === undefined || subQuestionId === null)
            throw new Error("The parameter 'subQuestionId' must be defined.");
        url = url.replace("{subQuestionId}", encodeURIComponent("" + subQuestionId)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRemoveSubQuestion(response);
        });
    }

    private processRemoveSubQuestion(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    addChoiceToQuestion(survey: string, questionId: number, choiceKey: string, sortOrder: number): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{survey}/Question/{questionId}/Choice/{choiceKey}?"; 

        if (survey === undefined || survey === null)
            throw new Error("The parameter 'survey' must be defined.");
        url = url.replace("{survey}", encodeURIComponent("" + survey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (choiceKey === undefined || choiceKey === null)
            throw new Error("The parameter 'choiceKey' must be defined.");
        url = url.replace("{choiceKey}", encodeURIComponent("" + choiceKey)); 

        var content = JSON.stringify(sortOrder);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAddChoiceToQuestion(response);
        });
    }

    private processAddChoiceToQuestion(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    removeChoiceFromQuestion(survey: string, questionId: number, choiceKey: string): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{survey}/Question/{questionId}/Choice/{choiceKey}?"; 

        if (survey === undefined || survey === null)
            throw new Error("The parameter 'survey' must be defined.");
        url = url.replace("{survey}", encodeURIComponent("" + survey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (choiceKey === undefined || choiceKey === null)
            throw new Error("The parameter 'choiceKey' must be defined.");
        url = url.replace("{choiceKey}", encodeURIComponent("" + choiceKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRemoveChoiceFromQuestion(response);
        });
    }

    private processRemoveChoiceFromQuestion(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getQuestionVerbiage(surveyKey: string, questionId: number): Observable<QuestionVerbiageModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Verbiage?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetQuestionVerbiage(response);
        });
    }

    private processGetQuestionVerbiage(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionVerbiageModel = null; 
            result200 = data === "" ? null : <QuestionVerbiageModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    createQuestionVerbiage(surveyKey: string, questionId: number, value: CreateQuestionVerbiageModel): Observable<QuestionVerbiageModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Verbiage?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateQuestionVerbiage(response);
        });
    }

    private processCreateQuestionVerbiage(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionVerbiageModel = null; 
            result200 = data === "" ? null : <QuestionVerbiageModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    updateQuestionVerbiage(surveyKey: string, questionId: number, verbiageId: number, verbiage: string): Observable<QuestionVerbiageModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Verbiage/{verbiageId}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (verbiageId === undefined || verbiageId === null)
            throw new Error("The parameter 'verbiageId' must be defined.");
        url = url.replace("{verbiageId}", encodeURIComponent("" + verbiageId)); 

        var content = JSON.stringify(verbiage);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateQuestionVerbiage(response);
        });
    }

    private processUpdateQuestionVerbiage(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionVerbiageModel = null; 
            result200 = data === "" ? null : <QuestionVerbiageModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    deleteQuestionVerbiage(surveyKey: string, questionId: number, verbiageId: number): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Verbiage/{verbiageId}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (verbiageId === undefined || verbiageId === null)
            throw new Error("The parameter 'verbiageId' must be defined.");
        url = url.replace("{verbiageId}", encodeURIComponent("" + verbiageId)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteQuestionVerbiage(response);
        });
    }

    private processDeleteQuestionVerbiage(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getQuestionAttribute(surveyKey: string, questionId: number, attributeKey: string): Observable<QuestionAttributeModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Attribute/{attributeKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetQuestionAttribute(response);
        });
    }

    private processGetQuestionAttribute(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionAttributeModel = null; 
            result200 = data === "" ? null : <QuestionAttributeModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    updateQuestionAttributeValues(surveyKey: string, questionId: number, attributeKey: string, value: string): Observable<QuestionAttributeModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Attribute/{attributeKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateQuestionAttributeValues(response);
        });
    }

    private processUpdateQuestionAttributeValues(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionAttributeModel = null; 
            result200 = data === "" ? null : <QuestionAttributeModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    createQuestionAttributeValues(surveyKey: string, questionId: number, attributeKey: string, value: string): Observable<QuestionAttributeModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Attribute/{attributeKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateQuestionAttributeValues(response);
        });
    }

    private processCreateQuestionAttributeValues(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionAttributeModel = null; 
            result200 = data === "" ? null : <QuestionAttributeModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    deleteQuestionAttributeValues(surveyKey: string, questionId: number, attributeKey: string): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Attribute/{attributeKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteQuestionAttributeValues(response);
        });
    }

    private processDeleteQuestionAttributeValues(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getQuestionAttributeValues(surveyKey: string, questionId: number): Observable<QuestionAttributeModel[]> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Attribute?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetQuestionAttributeValues(response);
        });
    }

    private processGetQuestionAttributeValues(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionAttributeModel[] = null; 
            result200 = data === "" ? null : <QuestionAttributeModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }
}

export interface IQuestionTypeClient {
    /**
     * @return OK
     */
    all(): Observable<QuestionTypeModel[]>;
    /**
     * @return OK
     */
    get(typeKey: string): Observable<QuestionTypeModel>;
    /**
     * @return OK
     */
    put(typeKey: string, description: string): Observable<QuestionTypeModel>;
    /**
     * @return OK
     */
    delete(typeKey: string): Observable<boolean>;
    /**
     * @return OK
     */
    post(value: CreateQuestionTypeModel): Observable<QuestionTypeModel>;
    /**
     * @return OK
     */
    getAttributes(typeKey: string): Observable<AttributeDefinitionModel[]>;
    /**
     * @return OK
     */
    createAttribute(typeKey: string, value: CreateAttributeDefinitionModel): Observable<AttributeDefinitionModel>;
    /**
     * @return OK
     */
    getAttribute(typeKey: string, attributeKey: string): Observable<AttributeDefinitionModel>;
    /**
     * @return OK
     */
    updateAttribute(typeKey: string, attributeKey: string, description: string): Observable<AttributeDefinitionModel>;
    /**
     * @return OK
     */
    deleteAttribute(typeKey: string, attributeKey: string): Observable<boolean>;
}

@Injectable()
export class QuestionTypeClient implements IQuestionTypeClient {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    private jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string, @Optional() @Inject(JSON_PARSE_REVIVER) jsonParseReviver?: (key: string, value: any) => any) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://test-bpm-surveyengine.drivetime.com"; 
        this.jsonParseReviver = jsonParseReviver;
    }

    /**
     * @return OK
     */
    all(): Observable<QuestionTypeModel[]> {
        var url = this.baseUrl + "/api/QuestionType/All?"; 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAll(response);
        });
    }

    private processAll(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionTypeModel[] = null; 
            result200 = data === "" ? null : <QuestionTypeModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    get(typeKey: string): Observable<QuestionTypeModel> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        });
    }

    private processGet(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionTypeModel = null; 
            result200 = data === "" ? null : <QuestionTypeModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    put(typeKey: string, description: string): Observable<QuestionTypeModel> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 

        var content = JSON.stringify(description);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPut(response);
        });
    }

    private processPut(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionTypeModel = null; 
            result200 = data === "" ? null : <QuestionTypeModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    delete(typeKey: string): Observable<boolean> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        });
    }

    private processDelete(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    post(value: CreateQuestionTypeModel): Observable<QuestionTypeModel> {
        var url = this.baseUrl + "/api/QuestionType?"; 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPost(response);
        });
    }

    private processPost(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionTypeModel = null; 
            result200 = data === "" ? null : <QuestionTypeModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getAttributes(typeKey: string): Observable<AttributeDefinitionModel[]> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}/Attributes?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAttributes(response);
        });
    }

    private processGetAttributes(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: AttributeDefinitionModel[] = null; 
            result200 = data === "" ? null : <AttributeDefinitionModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    createAttribute(typeKey: string, value: CreateAttributeDefinitionModel): Observable<AttributeDefinitionModel> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}/Attributes?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateAttribute(response);
        });
    }

    private processCreateAttribute(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: AttributeDefinitionModel = null; 
            result200 = data === "" ? null : <AttributeDefinitionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getAttribute(typeKey: string, attributeKey: string): Observable<AttributeDefinitionModel> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}/Attributes/{attributeKey}?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAttribute(response);
        });
    }

    private processGetAttribute(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: AttributeDefinitionModel = null; 
            result200 = data === "" ? null : <AttributeDefinitionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    updateAttribute(typeKey: string, attributeKey: string, description: string): Observable<AttributeDefinitionModel> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}/Attributes/{attributeKey}?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = JSON.stringify(description);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateAttribute(response);
        });
    }

    private processUpdateAttribute(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: AttributeDefinitionModel = null; 
            result200 = data === "" ? null : <AttributeDefinitionModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    deleteAttribute(typeKey: string, attributeKey: string): Observable<boolean> {
        var url = this.baseUrl + "/api/QuestionType/{typeKey}/Attributes/{attributeKey}?"; 

        if (typeKey === undefined || typeKey === null)
            throw new Error("The parameter 'typeKey' must be defined.");
        url = url.replace("{typeKey}", encodeURIComponent("" + typeKey)); 
        if (attributeKey === undefined || attributeKey === null)
            throw new Error("The parameter 'attributeKey' must be defined.");
        url = url.replace("{attributeKey}", encodeURIComponent("" + attributeKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteAttribute(response);
        });
    }

    private processDeleteAttribute(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }
}

export interface ISurveyClient {
    /**
     * @return OK
     */
    all(): Observable<SurveyModel[]>;
    /**
     * @return OK
     */
    get(surveyKey: string): Observable<SurveyModel>;
    /**
     * @return OK
     */
    put(surveyKey: string, value: UpdateSurveyModel): Observable<SurveyModel>;
    /**
     * @return OK
     */
    delete(surveyKey: string): Observable<boolean>;
    /**
     * @return OK
     */
    post(value: SurveyModel): Observable<SurveyModel>;
    /**
     * @return OK
     */
    openSurvey(surveyKey: string, workableKey: string, employeeId: string): Observable<OpenSurveyModel>;
    /**
     * @return OK
     */
    answerQuestion(surveyKey: string, questionId: number, workableKey: string, employeeId: string, request: AnswerQuestionRequestModel): Observable<SurveyQuestionModel[]>;
    /**
     * @return OK
     */
    complete(surveyKey: string, workableKey: string, employeeId: string, session: string): Observable<boolean>;
    /**
     * @return OK
     */
    cancel(surveyKey: string, workableKey: string, employeeId: string, session: string): Observable<boolean>;
    /**
     * @return OK
     */
    getCompletedSurvey(surveyKey: string, surveyInstance: string): Observable<QuestionAnswerModel[]>;
    /**
     * @return OK
     */
    getSurveyQuestionNames(surveyKey: string): Observable<{ [key: string] : string; }>;
}

@Injectable()
export class SurveyClient implements ISurveyClient {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    private jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string, @Optional() @Inject(JSON_PARSE_REVIVER) jsonParseReviver?: (key: string, value: any) => any) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : "http://test-bpm-surveyengine.drivetime.com"; 
        this.jsonParseReviver = jsonParseReviver;
    }

    /**
     * @return OK
     */
    all(): Observable<SurveyModel[]> {
        var url = this.baseUrl + "/api/Survey/All?"; 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAll(response);
        });
    }

    private processAll(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: SurveyModel[] = null; 
            result200 = data === "" ? null : <SurveyModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    get(surveyKey: string): Observable<SurveyModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGet(response);
        });
    }

    private processGet(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: SurveyModel = null; 
            result200 = data === "" ? null : <SurveyModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    put(surveyKey: string, value: UpdateSurveyModel): Observable<SurveyModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPut(response);
        });
    }

    private processPut(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: SurveyModel = null; 
            result200 = data === "" ? null : <SurveyModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    delete(surveyKey: string): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDelete(response);
        });
    }

    private processDelete(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    post(value: SurveyModel): Observable<SurveyModel> {
        var url = this.baseUrl + "/api/Survey?"; 

        var content = JSON.stringify(value);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPost(response);
        });
    }

    private processPost(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: SurveyModel = null; 
            result200 = data === "" ? null : <SurveyModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    openSurvey(surveyKey: string, workableKey: string, employeeId: string): Observable<OpenSurveyModel> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Open/{workableKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (workableKey === undefined || workableKey === null)
            throw new Error("The parameter 'workableKey' must be defined.");
        url = url.replace("{workableKey}", encodeURIComponent("" + workableKey)); 

        if (employeeId === undefined || employeeId === null)
            throw new Error("The parameter 'employeeId' must be defined.");
        else
            url += "employeeId=" + encodeURIComponent("" + employeeId) + "&"; 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processOpenSurvey(response);
        });
    }

    private processOpenSurvey(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: OpenSurveyModel = null; 
            result200 = data === "" ? null : <OpenSurveyModel>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    answerQuestion(surveyKey: string, questionId: number, workableKey: string, employeeId: string, request: AnswerQuestionRequestModel): Observable<SurveyQuestionModel[]> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Question/{questionId}/Answer/{workableKey}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url = url.replace("{questionId}", encodeURIComponent("" + questionId)); 
        if (workableKey === undefined || workableKey === null)
            throw new Error("The parameter 'workableKey' must be defined.");
        url = url.replace("{workableKey}", encodeURIComponent("" + workableKey)); 

        if (employeeId === undefined || employeeId === null)
            throw new Error("The parameter 'employeeId' must be defined.");
        else
            url += "employeeId=" + encodeURIComponent("" + employeeId) + "&"; 

        var content = JSON.stringify(request);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAnswerQuestion(response);
        });
    }

    private processAnswerQuestion(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: SurveyQuestionModel[] = null; 
            result200 = data === "" ? null : <SurveyQuestionModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    complete(surveyKey: string, workableKey: string, employeeId: string, session: string): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Complete?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        if (workableKey === undefined || workableKey === null)
            throw new Error("The parameter 'workableKey' must be defined.");
        else
            url += "workableKey=" + encodeURIComponent("" + workableKey) + "&"; 
        if (employeeId === undefined || employeeId === null)
            throw new Error("The parameter 'employeeId' must be defined.");
        else
            url += "employeeId=" + encodeURIComponent("" + employeeId) + "&"; 
        if (session === undefined || session === null)
            throw new Error("The parameter 'session' must be defined.");
        else
            url += "session=" + encodeURIComponent("" + session) + "&"; 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processComplete(response);
        });
    }

    private processComplete(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    cancel(surveyKey: string, workableKey: string, employeeId: string, session: string): Observable<boolean> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Cancel?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        if (workableKey === undefined || workableKey === null)
            throw new Error("The parameter 'workableKey' must be defined.");
        else
            url += "workableKey=" + encodeURIComponent("" + workableKey) + "&"; 
        if (employeeId === undefined || employeeId === null)
            throw new Error("The parameter 'employeeId' must be defined.");
        else
            url += "employeeId=" + encodeURIComponent("" + employeeId) + "&"; 
        if (session === undefined || session === null)
            throw new Error("The parameter 'session' must be defined.");
        else
            url += "session=" + encodeURIComponent("" + session) + "&"; 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCancel(response);
        });
    }

    private processCancel(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: boolean = null; 
            result200 = data === "" ? null : <boolean>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getCompletedSurvey(surveyKey: string, surveyInstance: string): Observable<QuestionAnswerModel[]> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/Completed/{surveyInstance}?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 
        if (surveyInstance === undefined || surveyInstance === null)
            throw new Error("The parameter 'surveyInstance' must be defined.");
        url = url.replace("{surveyInstance}", encodeURIComponent("" + surveyInstance)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCompletedSurvey(response);
        });
    }

    private processGetCompletedSurvey(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: QuestionAnswerModel[] = null; 
            result200 = data === "" ? null : <QuestionAnswerModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }

    /**
     * @return OK
     */
    getSurveyQuestionNames(surveyKey: string): Observable<{ [key: string] : string; }> {
        var url = this.baseUrl + "/api/Survey/{surveyKey}/QuestionNames?"; 

        if (surveyKey === undefined || surveyKey === null)
            throw new Error("The parameter 'surveyKey' must be defined.");
        url = url.replace("{surveyKey}", encodeURIComponent("" + surveyKey)); 

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetSurveyQuestionNames(response);
        });
    }

    private processGetSurveyQuestionNames(response: Response) {
        var data = response.text();
        var status = response.status.toString(); 

        if (status === "200") {
            var result200: { [key: string] : string; } = null; 
            result200 = data === "" ? null : <{ [key: string] : string; }>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status"; 
        }
    }
}

export interface ChoiceModel {
    Key?: string;
    Description?: string;
    DisplayValue?: string;
}

export interface CreateUpdateChoiceModel {
    Description?: string;
    DisplayValue?: string;
    Key?: string;
}

export interface QuestionModel {
    Id?: number;
    Name?: string;
    IsRequired?: boolean;
    EffectiveOn?: Date;
    ExpiredOn?: Date;
    SortOrder?: number;
    PageNumber?: number;
    Choices?: QuestionChoiceModel[];
    Type?: QuestionTypeModel;
    SubQuestions?: number[];
    Verbiage?: QuestionVerbiageModel;
}

export interface QuestionChoiceModel {
    SortOrder?: number;
    Key?: string;
    Description?: string;
    DisplayValue?: string;
}

export interface QuestionTypeModel {
    Key?: string;
    Description?: string;
    Attributes?: AttributeDefinitionModel[];
}

export interface QuestionVerbiageModel {
    Id?: number;
    Verbiage?: string;
}

export interface AttributeDefinitionModel {
    Key?: string;
    Description?: string;
    Values?: QuestionAttributeModel[];
}

export interface QuestionAttributeModel {
    Id?: number;
    Value?: string;
}

export interface CreateQuestionModel {
    EffectiveOn?: Date;
    ExpireOn?: Date;
    IsRequired?: boolean;
    QuestionName?: string;
    QuestionTypeKey?: string;
    SortOrder?: number;
    PageNumber?: number;
    SurveyKey?: string;
}

export interface UpdateQuestionModel {
    IsRequired?: boolean;
    SortOrder?: number;
    PageNumber?: number;
}

export interface CreateSubQuestionModel {
    ConditionalAnswer?: string;
    EffectiveOn?: Date;
    ExpireOn?: Date;
    IsRequired?: boolean;
    QuestionName?: string;
    QuestionTypeKey?: string;
    SortOrder?: number;
    PageNumber?: number;
    SurveyKey?: string;
}

export interface CreateQuestionVerbiageModel {
    EffectiveOn?: Date;
    ExpireOn?: Date;
    QuestionId?: number;
    Verbiage?: string;
}

export interface CreateQuestionTypeModel {
    TypeKey?: string;
    Description?: string;
}

export interface CreateAttributeDefinitionModel {
    Key?: string;
    Description?: string;
}

export interface SurveyModel {
    Key?: string;
    Description?: string;
    DaysToLive?: number;
    WorkableTypeKey?: string;
}

export interface UpdateSurveyModel {
    Description?: string;
    DaysToLive?: number;
}

export interface OpenSurveyModel {
    Session?: string;
    Questions?: SurveyQuestionModel[];
}

export interface SurveyQuestionModel {
    SavedAnswer?: string;
    IsBaseQuestion?: boolean;
    SubQuestionConditions?: SubQuestionModel[];
    Id?: number;
    Name?: string;
    IsRequired?: boolean;
    EffectiveOn?: Date;
    ExpiredOn?: Date;
    SortOrder?: number;
    PageNumber?: number;
    Choices?: QuestionChoiceModel[];
    Type?: QuestionTypeModel;
    SubQuestions?: number[];
    Verbiage?: QuestionVerbiageModel;
}

export interface SubQuestionModel {
    SubQuestionId?: number;
    ConditionalAnswerValue?: string;
    SortOrder?: number;
}

export interface AnswerQuestionRequestModel {
    Session?: string;
    Answers?: SurveyAnswerModel[];
}

export interface SurveyAnswerModel {
    AnswerValue?: string;
}

export interface QuestionAnswerModel {
    QuestionId?: number;
    AnswerValue?: string;
}